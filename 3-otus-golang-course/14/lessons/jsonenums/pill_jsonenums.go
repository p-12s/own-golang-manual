// generated by jsonenums -type=Pill; DO NOT EDIT

package main

import (
	"encoding/json"
	"fmt"
)

var (
	_PillNameToValue = map[string]Pill{
		"Placebo":     Placebo,
		"Aspirin":     Aspirin,
		"Ibuprofen":   Ibuprofen,
		"Paracetamol": Paracetamol,
	}

	_PillValueToName = map[Pill]string{
		Placebo:     "Placebo",
		Aspirin:     "Aspirin",
		Ibuprofen:   "Ibuprofen",
		Paracetamol: "Paracetamol",
	}
)

func init() {
	var v Pill
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_PillNameToValue = map[string]Pill{
			interface{}(Placebo).(fmt.Stringer).String():     Placebo,
			interface{}(Aspirin).(fmt.Stringer).String():     Aspirin,
			interface{}(Ibuprofen).(fmt.Stringer).String():   Ibuprofen,
			interface{}(Paracetamol).(fmt.Stringer).String(): Paracetamol,
		}
	}
}

// MarshalJSON is generated so Pill satisfies json.Marshaler.
func (r Pill) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _PillValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Pill: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Pill satisfies json.Unmarshaler.
func (r *Pill) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Pill should be a string, got %s", data)
	}
	v, ok := _PillNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Pill %q", s)
	}
	*r = v
	return nil
}
